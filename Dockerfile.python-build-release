# Multi-stage Dockerfile to build the Triton Python Backend from source
# with all available options enabled and produce an install tree under
# /opt/tritonserver/backends/python in the final image.

FROM nvidia/cuda:13.0.1-cudnn-devel-ubuntu24.04 AS builder

LABEL maintainer="triton-python-backend-builder-release"

ENV DEBIAN_FRONTEND=noninteractive \
    TRITON_BUILD_TYPE=Release \
    TRITON_INSTALL_PREFIX=/workspace/build/triton-python-backend/install \
    TRITON_MIN_CXX_STANDARD=17 \
    TRITON_BACKEND_REPO_TAG=main \
    TRITON_COMMON_REPO_TAG=main \
    TRITON_CORE_REPO_TAG=main \
    TRITON_ENABLE_GPU=ON \
    TRITON_ENABLE_NVTX=ON \
    TRITON_ENABLE_STATS=ON \
    BUILD_CMAKE_FLAGS=""

# Base packages and build toolchain
RUN apt-get update \
 && apt-get install -y --no-install-recommends \
    ca-certificates \
    gnupg \
    wget \
    curl \
    lsb-release \
    software-properties-common \
    build-essential \
    git \
    ninja-build \
    pkg-config \
    python3 \
    python3-dev \
    python3-venv \
    python3-pip \
    zlib1g-dev \
    libarchive-dev \
    rapidjson-dev \
    libssl-dev \
    libcurl4-openssl-dev \
    unzip \
    patchelf \
 && rm -rf /var/lib/apt/lists/*

# Install a modern CMake from Kitware APT to satisfy CMakeLists minimum
RUN set -eux; \
    wget -O - "https://apt.kitware.com/keys/kitware-archive-latest.asc" | gpg --dearmor -o /usr/share/keyrings/kitware-archive-keyring.gpg; \
    echo "deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main" > /etc/apt/sources.list.d/kitware.list; \
    apt-get update; \
    apt-get install -y --no-install-recommends cmake; \
    rm -rf /var/lib/apt/lists/*

# Python venv for build helpers and numpy
RUN python3 -m venv /opt/pybuild \
 && /opt/pybuild/bin/python -m pip install --upgrade pip setuptools wheel \
 && /opt/pybuild/bin/python -m pip install "cmake>=3.31.8" \
 && /opt/pybuild/bin/python -m pip install numpy

ENV PATH=/opt/pybuild/bin:$PATH

WORKDIR /workspace

# Copy source (avoid bringing in local build artifacts from context)
COPY . /workspace/python_backend

# Persistent build directory for caching
RUN mkdir -p /workspace/build-cache

# Configure
RUN --mount=type=cache,id=cmake-python-backend-cache,target=/workspace/build-cache \
    cmake -S /workspace/python_backend -B /workspace/build-cache -G Ninja \
      -DCMAKE_BUILD_TYPE=${TRITON_BUILD_TYPE} \
      -DCMAKE_INSTALL_PREFIX=${TRITON_INSTALL_PREFIX} \
      -DTRITON_BACKEND_REPO_TAG=${TRITON_BACKEND_REPO_TAG} \
      -DTRITON_COMMON_REPO_TAG=${TRITON_COMMON_REPO_TAG} \
      -DTRITON_CORE_REPO_TAG=${TRITON_CORE_REPO_TAG} \
      -DTRITON_ENABLE_GPU=${TRITON_ENABLE_GPU} \
      -DTRITON_ENABLE_NVTX=${TRITON_ENABLE_NVTX} \
      -DTRITON_ENABLE_STATS=${TRITON_ENABLE_STATS} \
      -DTRITON_MIN_CXX_STANDARD=${TRITON_MIN_CXX_STANDARD} \
     -DCMAKE_INTERPROCEDURAL_OPTIMIZATION_RELEASE:BOOL=TRUE \
      ${BUILD_CMAKE_FLAGS}

# Build
RUN --mount=type=cache,id=cmake-python-backend-cache,target=/workspace/build-cache \
    cmake --build /workspace/build-cache --config ${TRITON_BUILD_TYPE} -j"$(nproc)" --verbose

# Install
RUN --mount=type=cache,id=cmake-python-backend-cache,target=/workspace/build-cache \
    cmake --install /workspace/build-cache --config ${TRITON_BUILD_TYPE} --verbose


# Final stage: deliver install tree under /opt/tritonserver
FROM nvidia/cuda:13.0.1-cudnn-devel-ubuntu24.04 AS runtime

LABEL maintainer="triton-python-backend-builder-release"

# Copy install tree
COPY --from=builder /workspace/build/triton-python-backend/install /opt/tritonserver

# Ensure reasonable PATH/LD_LIBRARY_PATH defaults
ENV LD_LIBRARY_PATH=/usr/local/cuda/targets/x86_64-linux/lib:/opt/tritonserver/lib:${LD_LIBRARY_PATH:-} \
    PATH=/opt/tritonserver/bin:${PATH}

WORKDIR /opt/tritonserver

CMD ["/bin/bash"]
